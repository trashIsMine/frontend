{"ast":null,"code":"var _jsxFileName = \"/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import axios from \"axios\";\n// import {Post} from \"../interface/posts\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//\n//     // useEffect(() => {\n//     //     const initializeMap = (latitude: number, longitude: number) => {\n//     //         // 지도생성\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(latitude, longitude),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //         // 여기까지\n//     //\n//     //         // 현재 위치에 마커 표시\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //\n//     //         // if (selectedPlace) {\n//     //         //     const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//     //         //     const marker = new window.kakao.maps.Marker({\n//     //         //         position: markerPosition\n//     //         //     });\n//     //         //\n//     //         //     const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//     //         //         iwRemoveable = true;\n//     //         //\n//     //         //     const infowindow = new window.kakao.maps.InfoWindow({\n//     //         //         content: iwContent,\n//     //         //         removable: iwRemoveable\n//     //         //     });\n//     //         //\n//     //         //     marker.setMap(map);\n//     //         //\n//     //         //     window.kakao.maps.event.addListener(marker, 'click', function () {\n//     //         //         infowindow.open(map, marker);\n//     //         //     });\n//     //         // }\n//     //     };\n//     //\n//     //     navigator.geolocation.getCurrentPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setCenter({ lat: latitude, lng: longitude });\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //         initializeMap(latitude, longitude);\n//     //     });\n//     //\n//     //     const watchId = navigator.geolocation.watchPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //     });\n//     //\n//     //     return () => {\n//     //         navigator.geolocation.clearWatch(watchId);\n//     //     };\n//     // }, [selectedPlace, position]);\n//     //\n//     // useEffect(() => {\n//     //     if (position.lat !== 0 && position.lng !== 0) {\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //     }\n//     // }, [position]);\n//     const [posts, setPosts] = useState<Post[]>([]);\n//\n//     useEffect(() => {\n//         // 사용자의 현재 위치를 가져오는 함수\n//         const getCurrentLocation = () => {\n//             const fetchPosts = async () => {\n//                 axios.get(`http://3.37.252.66:8080/index/articles`)\n//                     .then((response) => {\n//                         if (response.status === 200) {\n//                             setPosts(response.data);\n//                             // console.log('Articles:', response.data);\n//                             // console.log(articles);\n//                         } else {\n//                             alert('Post get failed. Please try again.');\n//                         }\n//                     })\n//                     .catch(error => {\n//                         if (error.response) {\n//                             alert(`Error: ${error.response.data}`);\n//                         } else {\n//                             alert('Error during request');\n//                         }\n//                     });\n//             };\n//\n//             fetchPosts();\n//\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//\n//                         const mapContainer = document.getElementById('map'); // 지도를 표시할 div\n//                         const mapOption = {\n//                             center: new window.kakao.maps.LatLng(latitude, longitude), // 사용자의 현재 위치로 중심좌표 설정\n//                             level: 3 // 지도의 확대 레벨\n//                         };\n//\n//                         // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n//                         const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//                         // 현재 위치에 마커를 표시합니다\n//                         const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//                         const marker = new window.kakao.maps.Marker({\n//                             position: markerPosition\n//                         });\n//                         posts.map((post, index) => {\n//                             const markerPosition = new window.kakao.maps.LatLng(post.lat, post.lng);\n//                             const marker = new window.kakao.maps.Marker({\n//                                 position: markerPosition\n//                             });\n//                         };\n//\n//                         // 마커를 지도 위에 표시합니다\n//                         marker.setMap(map);\n//                     },\n//                     (error) => {\n//                         console.error('Error retrieving location:', error);\n//                     }\n//                 );\n//             } else {\n//                 console.error('Geolocation is not supported by this browser.');\n//             }\n//         };\n//\n//         getCurrentLocation();\n//     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n//\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n//\n//\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  selectedPlace,\n  login,\n  setLogin\n}) {\n  _s();\n  if (login) {\n    setLogin(true);\n  } else {\n    setLogin(false);\n  }\n  const [center, setCenter] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  const [position, setPosition] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // 사용자의 현재 위치를 가져오는 함수\n    const getCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setCenter({\n            lat: latitude,\n            lng: longitude\n          });\n          setPosition({\n            lat: latitude,\n            lng: longitude\n          });\n\n          // 지도 초기화\n          initializeMap(latitude, longitude);\n        }, error => {\n          console.error(\"Error retrieving location:\", error);\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    const initializeMap = (latitude, longitude) => {\n      const mapContainer = document.getElementById(\"map\"); // 지도를 표시할 div\n      const mapOption = {\n        center: new window.kakao.maps.LatLng(latitude, longitude),\n        // 사용자의 현재 위치로 중심좌표 설정\n        level: 3 // 지도의 확대 레벨\n      };\n\n      // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n      const map = new window.kakao.maps.Map(mapContainer, mapOption);\n\n      // 현재 위치에 마커를 표시합니다\n      const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition,\n        title: \"현재 위치\"\n      });\n      marker.setMap(map);\n\n      // 가져온 데이터로 마커 추가\n      posts.forEach(post => {\n        const postMarkerPosition = new window.kakao.maps.LatLng(post.lat, post.lng);\n        const postMarker = new window.kakao.maps.Marker({\n          position: postMarkerPosition,\n          title: post.title // 포스트 제목을 마커 타이틀로 설정\n        });\n        postMarker.setMap(map);\n      });\n    };\n\n    // 게시물 데이터를 가져오는 함수\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(`http://3.37.252.66:8080/index/articles`);\n        if (response.status === 200) {\n          setPosts(response.data);\n        } else {\n          alert(\"Post get failed. Please try again.\");\n        }\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response) {\n          alert(`Error: ${error.response.data}`);\n        } else {\n          alert(\"Error during request\");\n        }\n      }\n    };\n    fetchPosts().then(() => {\n      // 게시물 데이터를 가져온 후 현재 위치 설정\n      getCurrentLocation();\n    });\n  }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: styles.map\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 12\n  }, this);\n}\n_s(MapPage, \"ZvDaYRhoI6t9vrdqhf5sAw61QQk=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useState","styles","axios","jsxDEV","_jsxDEV","MapPage","selectedPlace","login","setLogin","_s","center","setCenter","lat","lng","position","setPosition","posts","setPosts","getCurrentLocation","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","initializeMap","error","console","mapContainer","document","getElementById","mapOption","window","kakao","maps","LatLng","level","map","Map","markerPosition","marker","Marker","title","setMap","forEach","post","postMarkerPosition","postMarker","fetchPosts","response","get","status","data","alert","isAxiosError","then","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import axios from \"axios\";\n// import {Post} from \"../interface/posts\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//\n//     // useEffect(() => {\n//     //     const initializeMap = (latitude: number, longitude: number) => {\n//     //         // 지도생성\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(latitude, longitude),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //         // 여기까지\n//     //\n//     //         // 현재 위치에 마커 표시\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //\n//     //         // if (selectedPlace) {\n//     //         //     const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//     //         //     const marker = new window.kakao.maps.Marker({\n//     //         //         position: markerPosition\n//     //         //     });\n//     //         //\n//     //         //     const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//     //         //         iwRemoveable = true;\n//     //         //\n//     //         //     const infowindow = new window.kakao.maps.InfoWindow({\n//     //         //         content: iwContent,\n//     //         //         removable: iwRemoveable\n//     //         //     });\n//     //         //\n//     //         //     marker.setMap(map);\n//     //         //\n//     //         //     window.kakao.maps.event.addListener(marker, 'click', function () {\n//     //         //         infowindow.open(map, marker);\n//     //         //     });\n//     //         // }\n//     //     };\n//     //\n//     //     navigator.geolocation.getCurrentPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setCenter({ lat: latitude, lng: longitude });\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //         initializeMap(latitude, longitude);\n//     //     });\n//     //\n//     //     const watchId = navigator.geolocation.watchPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //     });\n//     //\n//     //     return () => {\n//     //         navigator.geolocation.clearWatch(watchId);\n//     //     };\n//     // }, [selectedPlace, position]);\n//     //\n//     // useEffect(() => {\n//     //     if (position.lat !== 0 && position.lng !== 0) {\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //     }\n//     // }, [position]);\n//     const [posts, setPosts] = useState<Post[]>([]);\n//\n//     useEffect(() => {\n//         // 사용자의 현재 위치를 가져오는 함수\n//         const getCurrentLocation = () => {\n//             const fetchPosts = async () => {\n//                 axios.get(`http://3.37.252.66:8080/index/articles`)\n//                     .then((response) => {\n//                         if (response.status === 200) {\n//                             setPosts(response.data);\n//                             // console.log('Articles:', response.data);\n//                             // console.log(articles);\n//                         } else {\n//                             alert('Post get failed. Please try again.');\n//                         }\n//                     })\n//                     .catch(error => {\n//                         if (error.response) {\n//                             alert(`Error: ${error.response.data}`);\n//                         } else {\n//                             alert('Error during request');\n//                         }\n//                     });\n//             };\n//\n//             fetchPosts();\n//\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//\n//                         const mapContainer = document.getElementById('map'); // 지도를 표시할 div\n//                         const mapOption = {\n//                             center: new window.kakao.maps.LatLng(latitude, longitude), // 사용자의 현재 위치로 중심좌표 설정\n//                             level: 3 // 지도의 확대 레벨\n//                         };\n//\n//                         // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n//                         const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//                         // 현재 위치에 마커를 표시합니다\n//                         const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//                         const marker = new window.kakao.maps.Marker({\n//                             position: markerPosition\n//                         });\n//                         posts.map((post, index) => {\n//                             const markerPosition = new window.kakao.maps.LatLng(post.lat, post.lng);\n//                             const marker = new window.kakao.maps.Marker({\n//                                 position: markerPosition\n//                             });\n//                         };\n//\n//                         // 마커를 지도 위에 표시합니다\n//                         marker.setMap(map);\n//                     },\n//                     (error) => {\n//                         console.error('Error retrieving location:', error);\n//                     }\n//                 );\n//             } else {\n//                 console.error('Geolocation is not supported by this browser.');\n//             }\n//         };\n//\n//         getCurrentLocation();\n//     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n//\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n//\n//\n\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport axios from \"axios\";\nimport { Post } from \"../interface/posts\";\n\ndeclare global {\n    interface Window {\n        kakao: any;\n    }\n}\n\ninterface MapPageProps {\n    selectedPlace: { lat: number; lng: number } | null; // 예시 타입, 필요에 따라 수정\n    login: boolean;\n    setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n    if (login) {\n        setLogin(true);\n    } else {\n        setLogin(false);\n    }\n    const [center, setCenter] = useState<{ lat: number; lng: number }>({\n        lat: 33.450701,\n        lng: 126.570667,\n    });\n    const [position, setPosition] = useState<{ lat: number; lng: number }>({\n        lat: 33.450701,\n        lng: 126.570667,\n    });\n    const [posts, setPosts] = useState<Post[]>([]);\n\n    useEffect(() => {\n        // 사용자의 현재 위치를 가져오는 함수\n        const getCurrentLocation = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const latitude = position.coords.latitude;\n                        const longitude = position.coords.longitude;\n                        setCenter({ lat: latitude, lng: longitude });\n                        setPosition({ lat: latitude, lng: longitude });\n\n                        // 지도 초기화\n                        initializeMap(latitude, longitude);\n                    },\n                    (error) => {\n                        console.error(\"Error retrieving location:\", error);\n                    }\n                );\n            } else {\n                console.error(\"Geolocation is not supported by this browser.\");\n            }\n        };\n\n        const initializeMap = (latitude: number, longitude: number) => {\n            const mapContainer = document.getElementById(\"map\"); // 지도를 표시할 div\n            const mapOption = {\n                center: new window.kakao.maps.LatLng(latitude, longitude), // 사용자의 현재 위치로 중심좌표 설정\n                level: 3, // 지도의 확대 레벨\n            };\n\n            // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n            const map = new window.kakao.maps.Map(mapContainer, mapOption);\n\n            // 현재 위치에 마커를 표시합니다\n            const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n            const marker = new window.kakao.maps.Marker({\n                position: markerPosition,\n                title: \"현재 위치\",\n            });\n            marker.setMap(map);\n\n            // 가져온 데이터로 마커 추가\n            posts.forEach((post) => {\n                const postMarkerPosition = new window.kakao.maps.LatLng(post.lat, post.lng);\n                const postMarker = new window.kakao.maps.Marker({\n                    position: postMarkerPosition,\n                    title: post.title, // 포스트 제목을 마커 타이틀로 설정\n                });\n                postMarker.setMap(map);\n            });\n        };\n\n        // 게시물 데이터를 가져오는 함수\n        const fetchPosts = async () => {\n            try {\n                const response = await axios.get(`http://3.37.252.66:8080/index/articles`);\n                if (response.status === 200) {\n                    setPosts(response.data);\n                } else {\n                    alert(\"Post get failed. Please try again.\");\n                }\n            } catch (error) {\n                if (axios.isAxiosError(error) && error.response) {\n                    alert(`Error: ${error.response.data}`);\n                } else {\n                    alert(\"Error during request\");\n                }\n            }\n        };\n\n        fetchPosts().then(() => {\n            // 게시물 데이터를 가져온 후 현재 위치 설정\n            getCurrentLocation();\n        });\n    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n\n    return <div id=\"map\" className={styles.map}></div>;\n}\n\nexport default MapPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}