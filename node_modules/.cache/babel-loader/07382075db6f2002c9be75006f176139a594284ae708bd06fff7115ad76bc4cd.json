{"ast":null,"code":"var _jsxFileName = \"/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//\n//     useEffect(() => {\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             // 지도생성\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//             // 여기까지\n//\n//             // 현재 위치에 마커 표시\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//\n//             if (selectedPlace) {\n//                 const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: markerPosition\n//                 });\n//\n//                 const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//                     iwRemoveable = true;\n//\n//                 const infowindow = new window.kakao.maps.InfoWindow({\n//                     content: iwContent,\n//                     removable: iwRemoveable\n//                 });\n//\n//                 marker.setMap(map);\n//\n//                 window.kakao.maps.event.addListener(marker, 'click', function () {\n//                     infowindow.open(map, marker);\n//                 });\n//             }\n//         };\n//\n//         navigator.geolocation.getCurrentPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setCenter({ lat: latitude, lng: longitude });\n//             setPosition({ lat: latitude, lng: longitude });\n//             initializeMap(latitude, longitude);\n//         });\n//\n//         const watchId = navigator.geolocation.watchPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setPosition({ lat: latitude, lng: longitude });\n//         });\n//\n//         return () => {\n//             navigator.geolocation.clearWatch(watchId);\n//         };\n//     }, [selectedPlace, position]);\n//\n//     useEffect(() => {\n//         if (position.lat !== 0 && position.lng !== 0) {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//         }\n//     }, [position]);\n//\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n\nimport React, { useEffect, useRef } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  selectedPlace,\n  login,\n  setLogin\n}) {\n  _s();\n  const mapRef = useRef(null); // 맵 객체를 위한 타입 지정\n  const markerRef = useRef(null); // 마커 객체를 위한 타입 지정\n\n  useEffect(() => {\n    const container = document.getElementById('map');\n    if (container) {\n      const options = {\n        center: new window.kakao.maps.LatLng(33.450701, 126.570667),\n        level: 3\n      };\n      const map = new window.kakao.maps.Map(container, options);\n      mapRef.current = map;\n      const marker = new window.kakao.maps.Marker({\n        position: new window.kakao.maps.LatLng(33.450701, 126.570667),\n        map: map,\n        title: \"현재 위치\"\n      });\n      markerRef.current = marker;\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedPlace && mapRef.current && markerRef.current) {\n      const newPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n      markerRef.current.setPosition(newPosition);\n      mapRef.current.setCenter(newPosition);\n    }\n  }, [selectedPlace]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: styles.map\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(MapPage, \"53lRkOOrjHY5rpoe2vY/YdK0VDw=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useRef","styles","jsxDEV","_jsxDEV","MapPage","selectedPlace","login","setLogin","_s","mapRef","markerRef","container","document","getElementById","options","center","window","kakao","maps","LatLng","level","map","Map","current","marker","Marker","position","title","newPosition","lat","lng","setPosition","setCenter","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//\n//     useEffect(() => {\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             // 지도생성\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//             // 여기까지\n//\n//             // 현재 위치에 마커 표시\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//\n//             if (selectedPlace) {\n//                 const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: markerPosition\n//                 });\n//\n//                 const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//                     iwRemoveable = true;\n//\n//                 const infowindow = new window.kakao.maps.InfoWindow({\n//                     content: iwContent,\n//                     removable: iwRemoveable\n//                 });\n//\n//                 marker.setMap(map);\n//\n//                 window.kakao.maps.event.addListener(marker, 'click', function () {\n//                     infowindow.open(map, marker);\n//                 });\n//             }\n//         };\n//\n//         navigator.geolocation.getCurrentPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setCenter({ lat: latitude, lng: longitude });\n//             setPosition({ lat: latitude, lng: longitude });\n//             initializeMap(latitude, longitude);\n//         });\n//\n//         const watchId = navigator.geolocation.watchPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setPosition({ lat: latitude, lng: longitude });\n//         });\n//\n//         return () => {\n//             navigator.geolocation.clearWatch(watchId);\n//         };\n//     }, [selectedPlace, position]);\n//\n//     useEffect(() => {\n//         if (position.lat !== 0 && position.lng !== 0) {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//         }\n//     }, [position]);\n//\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\n\ndeclare global {\n    interface Window {\n        kakao: any;\n    }\n}\n\ninterface MapPageProps {\n    selectedPlace: { lat: number, lng: number } | null;\n    login: boolean;\n    setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n    const mapRef = useRef<Window.kakao.maps.Map | null>(null); // 맵 객체를 위한 타입 지정\n    const markerRef = useRef<window.kakao.maps.Marker | null>(null); // 마커 객체를 위한 타입 지정\n\n    useEffect(() => {\n        const container = document.getElementById('map');\n        if (container) {\n            const options = {\n                center: new window.kakao.maps.LatLng(33.450701, 126.570667),\n                level: 3\n            };\n            const map = new window.kakao.maps.Map(container, options);\n            mapRef.current = map;\n\n            const marker = new window.kakao.maps.Marker({\n                position: new window.kakao.maps.LatLng(33.450701, 126.570667),\n                map: map,\n                title: \"현재 위치\"\n            });\n            markerRef.current = marker;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (selectedPlace && mapRef.current && markerRef.current) {\n            const newPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n            markerRef.current.setPosition(newPosition);\n            mapRef.current.setCenter(newPosition);\n        }\n    }, [selectedPlace]);\n\n    return (\n        <div id=\"map\" className={styles.map}></div>\n    );\n}\n\nexport default MapPage;\n\n"],"mappingscnD,SAASC,OAAOA,CAAC;EAAEC,aAAa;EAAEC,KAAK;EAAEC;AAAuB,CAAC,EAAE;EAAAC,EAAA;EAC/D,MAAMC,MAAM,GAAGT,MAAM,CAA+B,IAAI,CAAC,CAAC,CAAC;EAC3D,MAAMU,SAAS,GAAGV,MAAM,CAAkC,IAAI,CAAC,CAAC,CAAC;;EAEjED,SAAS,CAAC,MAAM;IACZ,MAAMY,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC;IAChD,IAAIF,SAAS,EAAE;MACX,MAAMG,OAAO,GAAG;QACZC,MAAM,EAAE,IAAIC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC;QAC3DC,KAAK,EAAE;MACX,CAAC;MACD,MAAMC,GAAG,GAAG,IAAIL,MAAM,CAACC,KAAK,CAACC,IAAI,CAACI,GAAG,CAACX,SAAS,EAAEG,OAAO,CAAC;MACzDL,MAAM,CAACc,OAAO,GAAGF,GAAG;MAEpB,MAAMG,MAAM,GAAG,IAAIR,MAAM,CAACC,KAAK,CAACC,IAAI,CAACO,MAAM,CAAC;QACxCC,QAAQ,EAAE,IAAIV,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC;QAC7DE,GAAG,EAAEA,GAAG;QACRM,KAAK,EAAE;MACX,CAAC,CAAC;MACFjB,SAAS,CAACa,OAAO,GAAGC,MAAM;IAC9B;EACJ,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IACZ,IAAIM,aAAa,IAAII,MAAM,CAACc,OAAO,IAAIb,SAAS,CAACa,OAAO,EAAE;MACtD,MAAMK,WAAW,GAAG,IAAIZ,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,MAAM,CAACd,aAAa,CAACwB,GAAG,EAAExB,aAAa,CAACyB,GAAG,CAAC;MACtFpB,SAAS,CAACa,OAAO,CAACQ,WAAW,CAACH,WAAW,CAAC;MAC1CnB,MAAM,CAACc,OAAO,CAACS,SAAS,CAACJ,WAAW,CAAC;IACzC;EACJ,CAAC,EAAE,CAACvB,aAAa,CAAC,CAAC;EAEnB,oBACIF,OAAA;IAAK8B,EAAE,EAAC,KAAK;IAACC,SAAS,EAAEjC,MAAM,CAACoB;EAAI;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEnD;AAAC9B,EAAA,CAlCQJ,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AAoChB,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}