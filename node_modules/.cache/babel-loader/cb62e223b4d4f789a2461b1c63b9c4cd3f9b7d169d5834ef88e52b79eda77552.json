{"ast":null,"code":"var _jsxFileName = \"/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import axios from \"axios\";\n// import {getPost, Post} from \"../interface/posts\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [posts, setPosts] = useState<getPost[]>([]);\n//\n//     // useEffect(() => {\n//     //     const initializeMap = (latitude: number, longitude: number) => {\n//     //         // 지도생성\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(latitude, longitude),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //         // 여기까지\n//     //\n//     //         // 현재 위치에 마커 표시\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //\n//     //         // if (selectedPlace) {\n//     //         //     const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//     //         //     const marker = new window.kakao.maps.Marker({\n//     //         //         position: markerPosition\n//     //         //     });\n//     //         //\n//     //         //     const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//     //         //         iwRemoveable = true;\n//     //         //\n//     //         //     const infowindow = new window.kakao.maps.InfoWindow({\n//     //         //         content: iwContent,\n//     //         //         removable: iwRemoveable\n//     //         //     });\n//     //         //\n//     //         //     marker.setMap(map);\n//     //         //\n//     //         //     window.kakao.maps.event.addListener(marker, 'click', function () {\n//     //         //         infowindow.open(map, marker);\n//     //         //     });\n//     //         // }\n//     //     };\n//     //\n//     //     navigator.geolocation.getCurrentPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setCenter({ lat: latitude, lng: longitude });\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //         initializeMap(latitude, longitude);\n//     //     });\n//     //\n//     //     const watchId = navigator.geolocation.watchPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //     });\n//     //\n//     //     return () => {\n//     //         navigator.geolocation.clearWatch(watchId);\n//     //     };\n//     // }, [selectedPlace, position]);\n//     //\n//     // useEffect(() => {\n//     //     if (position.lat !== 0 && position.lng !== 0) {\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //     }\n//     // }, [position]);\n//\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             axios.get(`http://3.37.252.66:8080/index/articles`)\n//                 .then((response) => {\n//                     if (response.status === 200) {\n//                         setPosts(response.data);\n//                         // console.log('Articles:', response.data);\n//                         // console.log(articles);\n//                     } else {\n//                         alert('Post get failed. Please try again.');\n//                     }\n//                 })\n//                 .catch(error => {\n//                     if (error.response) {\n//                         alert(`Error: ${error.response.data}`);\n//                     } else {\n//                         alert('Error during request');\n//                     }\n//                 });\n//\n//         };\n//         // 사용자의 현재 위치를 가져오는 함수\n//         const getCurrentLocation = () => {\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//\n//                         const mapContainer = document.getElementById('map'); // 지도를 표시할 div\n//                         const mapOption = {\n//                             center: new window.kakao.maps.LatLng(latitude, longitude), // 사용자의 현재 위치로 중심좌표 설정\n//                             level: 3 // 지도의 확대 레벨\n//                         };\n//\n//                         // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n//                         const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//                         // 현재 위치에 마커를 표시합니다\n//                         const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//                         const marker = new window.kakao.maps.Marker({\n//                             position: markerPosition\n//                         });\n//\n//                         // 마커를 지도 위에 표시합니다\n//                         marker.setMap(map);\n//\n//                         posts.map((post) => {\n//                             console.log(1, post.lat, post.lng)\n//                             const mark  = new window.kakao.maps.LatLng(post.lat, post.lng);\n//                             const marke = new window.kakao.maps.Marker({\n//                                 position: markerPosition\n//                             });\n//                             marke.setMap(map);\n//                         })\n//                     },\n//                     (error) => {\n//                         console.error('Error retrieving location:', error);\n//                     }\n//                 );\n//             } else {\n//                 console.error('Geolocation is not supported by this browser.');\n//             }\n//\n//\n//         };\n//\n//         fetchPosts();\n//         getCurrentLocation();\n//     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n//\n//     console.log(posts)\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n//\n//\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  selectedPlace,\n  login,\n  setLogin\n}) {\n  _s();\n  const [center, setCenter] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n        if (response.status === 200) {\n          setPosts(response.data);\n        } else {\n          alert(\"Post get failed. Please try again.\");\n        }\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response) {\n          alert(`Error: ${error.response.data}`);\n        } else {\n          alert(\"Error during request\");\n        }\n      }\n    };\n    const getCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setCenter({\n            lat: latitude,\n            lng: longitude\n          });\n          initializeMap(latitude, longitude);\n        }, error => {\n          console.error(\"Error retrieving location:\", error);\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    const initializeMap = (latitude, longitude) => {\n      const mapContainer = document.getElementById(\"map\");\n      const mapOption = {\n        center: new window.kakao.maps.LatLng(latitude, longitude),\n        level: 3\n      };\n      const map = new window.kakao.maps.Map(mapContainer, mapOption);\n      const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n      const currentMarker = new window.kakao.maps.Marker({\n        position: currentMarkerPosition,\n        title: \"현재 위치\"\n      });\n      currentMarker.setMap(map);\n      posts.map(post => {\n        console.log(typeof post.lat, typeof post.lng);\n        if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n          const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n          const postMarker = new window.kakao.maps.Marker({\n            position: postMarkerPosition,\n            title: post.title // 포스트 제목을 마커 타이틀로 설정\n          });\n          const iwContent = '<div style=\"padding:5px;\">Hello World! <br></div>'; // 인포윈도우 내용\n          const infoWindow = new window.kakao.maps.InfoWindow({\n            content: iwContent,\n            // 인포윈도우 내용\n            removable: true // 인포윈도우 닫기 버튼 표시\n          });\n          postMarker.setMap(map);\n\n          // 마커 클릭 시 인포윈도우 표시\n          window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n            infoWindow.open(map, postMarker);\n          });\n        }\n      });\n    };\n    fetchPosts().then(getCurrentLocation);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: styles.map\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 12\n  }, this);\n}\n_s(MapPage, \"pbTkSAxPidJy3Q7bCwvblF605oo=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useState","styles","axios","jsxDEV","_jsxDEV","MapPage","selectedPlace","login","setLogin","_s","center","setCenter","lat","lng","posts","setPosts","fetchPosts","response","get","status","data","alert","error","isAxiosError","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","initializeMap","console","mapContainer","document","getElementById","mapOption","window","kakao","maps","LatLng","level","map","Map","currentMarkerPosition","currentMarker","Marker","title","setMap","post","log","postMarkerPosition","parseFloat","postMarker","iwContent","infoWindow","InfoWindow","content","removable","event","addListener","open","then","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import axios from \"axios\";\n// import {getPost, Post} from \"../interface/posts\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null; // 예시 타입, 필요에 따라 수정\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     if (login) {\n//         setLogin(true);\n//     }\n//     else {\n//         setLogin(false);\n//     }\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [posts, setPosts] = useState<getPost[]>([]);\n//\n//     // useEffect(() => {\n//     //     const initializeMap = (latitude: number, longitude: number) => {\n//     //         // 지도생성\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(latitude, longitude),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //         // 여기까지\n//     //\n//     //         // 현재 위치에 마커 표시\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //\n//     //         // if (selectedPlace) {\n//     //         //     const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//     //         //     const marker = new window.kakao.maps.Marker({\n//     //         //         position: markerPosition\n//     //         //     });\n//     //         //\n//     //         //     const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n//     //         //         iwRemoveable = true;\n//     //         //\n//     //         //     const infowindow = new window.kakao.maps.InfoWindow({\n//     //         //         content: iwContent,\n//     //         //         removable: iwRemoveable\n//     //         //     });\n//     //         //\n//     //         //     marker.setMap(map);\n//     //         //\n//     //         //     window.kakao.maps.event.addListener(marker, 'click', function () {\n//     //         //         infowindow.open(map, marker);\n//     //         //     });\n//     //         // }\n//     //     };\n//     //\n//     //     navigator.geolocation.getCurrentPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setCenter({ lat: latitude, lng: longitude });\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //         initializeMap(latitude, longitude);\n//     //     });\n//     //\n//     //     const watchId = navigator.geolocation.watchPosition((pos) => {\n//     //         const latitude = pos.coords.latitude;\n//     //         const longitude = pos.coords.longitude;\n//     //         setPosition({ lat: latitude, lng: longitude });\n//     //     });\n//     //\n//     //     return () => {\n//     //         navigator.geolocation.clearWatch(watchId);\n//     //     };\n//     // }, [selectedPlace, position]);\n//     //\n//     // useEffect(() => {\n//     //     if (position.lat !== 0 && position.lng !== 0) {\n//     //         const container = document.getElementById('map');\n//     //         const options = {\n//     //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//     //             level: 3\n//     //         };\n//     //         const map = new window.kakao.maps.Map(container, options);\n//     //\n//     //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//     //         const currentMarker = new window.kakao.maps.Marker({\n//     //             position: currentMarkerPosition,\n//     //             title: \"현재 위치\"\n//     //         });\n//     //         currentMarker.setMap(map);\n//     //     }\n//     // }, [position]);\n//\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             axios.get(`http://3.37.252.66:8080/index/articles`)\n//                 .then((response) => {\n//                     if (response.status === 200) {\n//                         setPosts(response.data);\n//                         // console.log('Articles:', response.data);\n//                         // console.log(articles);\n//                     } else {\n//                         alert('Post get failed. Please try again.');\n//                     }\n//                 })\n//                 .catch(error => {\n//                     if (error.response) {\n//                         alert(`Error: ${error.response.data}`);\n//                     } else {\n//                         alert('Error during request');\n//                     }\n//                 });\n//\n//         };\n//         // 사용자의 현재 위치를 가져오는 함수\n//         const getCurrentLocation = () => {\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//\n//                         const mapContainer = document.getElementById('map'); // 지도를 표시할 div\n//                         const mapOption = {\n//                             center: new window.kakao.maps.LatLng(latitude, longitude), // 사용자의 현재 위치로 중심좌표 설정\n//                             level: 3 // 지도의 확대 레벨\n//                         };\n//\n//                         // 지도를 표시할 div와 지도 옵션으로 지도를 생성합니다\n//                         const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//                         // 현재 위치에 마커를 표시합니다\n//                         const markerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//                         const marker = new window.kakao.maps.Marker({\n//                             position: markerPosition\n//                         });\n//\n//                         // 마커를 지도 위에 표시합니다\n//                         marker.setMap(map);\n//\n//                         posts.map((post) => {\n//                             console.log(1, post.lat, post.lng)\n//                             const mark  = new window.kakao.maps.LatLng(post.lat, post.lng);\n//                             const marke = new window.kakao.maps.Marker({\n//                                 position: markerPosition\n//                             });\n//                             marke.setMap(map);\n//                         })\n//                     },\n//                     (error) => {\n//                         console.error('Error retrieving location:', error);\n//                     }\n//                 );\n//             } else {\n//                 console.error('Geolocation is not supported by this browser.');\n//             }\n//\n//\n//         };\n//\n//         fetchPosts();\n//         getCurrentLocation();\n//     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행\n//\n//     console.log(posts)\n//     return (\n//         <div id=\"map\" className={styles.map}>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n//\n//\n\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport axios from \"axios\";\nimport { getPost } from \"../interface/posts\";\n\ndeclare global {\n    interface Window {\n        kakao: any;\n    }\n}\n\ninterface MapPageProps {\n    selectedPlace: { lat: number, lng: number } | null;\n    login: boolean;\n    setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n    const [center, setCenter] = useState<{ lat: number; lng: number }>({\n        lat: 33.450701,\n        lng: 126.570667,\n    });\n    const [posts, setPosts] = useState<getPost[]>([]);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            try {\n                const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n                if (response.status === 200) {\n                    setPosts(response.data);\n                } else {\n                    alert(\"Post get failed. Please try again.\");\n                }\n            } catch (error) {\n                if (axios.isAxiosError(error) && error.response) {\n                    alert(`Error: ${error.response.data}`);\n                } else {\n                    alert(\"Error during request\");\n                }\n            }\n        };\n\n        const getCurrentLocation = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const latitude = position.coords.latitude;\n                        const longitude = position.coords.longitude;\n                        setCenter({ lat: latitude, lng: longitude });\n\n                        initializeMap(latitude, longitude);\n                    },\n                    (error) => {\n                        console.error(\"Error retrieving location:\", error);\n                    }\n                );\n            } else {\n                console.error(\"Geolocation is not supported by this browser.\");\n            }\n        };\n\n        const initializeMap = (latitude: number, longitude: number) => {\n            const mapContainer = document.getElementById(\"map\");\n            const mapOption = {\n                center: new window.kakao.maps.LatLng(latitude, longitude),\n                level: 3,\n            };\n\n            const map = new window.kakao.maps.Map(mapContainer, mapOption);\n\n            const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n            const currentMarker = new window.kakao.maps.Marker({\n                position: currentMarkerPosition,\n                title: \"현재 위치\",\n            });\n            currentMarker.setMap(map);\n\n            posts.map((post) => {\n                console.log(typeof(post.lat), typeof(post.lng))\n                if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n                    const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n                    const postMarker = new window.kakao.maps.Marker({\n                        position: postMarkerPosition,\n                        title: post.title, // 포스트 제목을 마커 타이틀로 설정\n                    });\n\n                    const iwContent = '<div style=\"padding:5px;\">Hello World! <br></div>'; // 인포윈도우 내용\n                    const infoWindow = new window.kakao.maps.InfoWindow({\n                        content: iwContent, // 인포윈도우 내용\n                        removable: true, // 인포윈도우 닫기 버튼 표시\n                    });\n\n                    postMarker.setMap(map);\n\n                    // 마커 클릭 시 인포윈도우 표시\n                    window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n                        infoWindow.open(map, postMarker);\n                    });\n                }\n            });\n        };\n\n        fetchPosts().then(getCurrentLocation);\n    }, []);\n\n    return <div id=\"map\" className={styles.map}></div>;\n}\n\nexport default MapPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}