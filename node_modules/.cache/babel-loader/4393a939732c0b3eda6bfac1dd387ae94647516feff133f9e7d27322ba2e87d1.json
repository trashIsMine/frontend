{"ast":null,"code":"var _jsxFileName = \"/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  selectedPlace\n}) {\n  _s();\n  const [center, setCenter] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  const [position, setPosition] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  useEffect(() => {\n    const initializeMap = (latitude, longitude) => {\n      // 지도생성\n      const container = document.getElementById('map');\n      const options = {\n        center: new window.kakao.maps.LatLng(latitude, longitude),\n        level: 3\n      };\n      const map = new window.kakao.maps.Map(container, options);\n      // 여기까지\n\n      // 현재 위치에 마커 표시\n      const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n      const currentMarker = new window.kakao.maps.Marker({\n        position: currentMarkerPosition,\n        title: \"현재 위치\"\n      });\n      currentMarker.setMap(map);\n      if (selectedPlace) {\n        const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n        const marker = new window.kakao.maps.Marker({\n          position: markerPosition\n        });\n        const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n          iwRemoveable = true;\n        const infowindow = new window.kakao.maps.InfoWindow({\n          content: iwContent,\n          removable: iwRemoveable\n        });\n        marker.setMap(map);\n        window.kakao.maps.event.addListener(marker, 'click', function () {\n          infowindow.open(map, marker);\n        });\n      }\n    };\n    navigator.geolocation.getCurrentPosition(pos => {\n      const latitude = pos.coords.latitude;\n      const longitude = pos.coords.longitude;\n      setCenter({\n        lat: latitude,\n        lng: longitude\n      });\n      setPosition({\n        lat: latitude,\n        lng: longitude\n      });\n      initializeMap(latitude, longitude);\n    });\n    const watchId = navigator.geolocation.watchPosition(pos => {\n      const latitude = pos.coords.latitude;\n      const longitude = pos.coords.longitude;\n      setPosition({\n        lat: latitude,\n        lng: longitude\n      });\n    });\n    return () => {\n      navigator.geolocation.clearWatch(watchId);\n    };\n  }, [selectedPlace, position]);\n\n  // useEffect(() => {\n  //     if (position.lat !== 0 && position.lng !== 0) {\n  //         const container = document.getElementById('map');\n  //         const options = {\n  //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n  //             level: 3\n  //         };\n  //         const map = new window.kakao.maps.Map(container, options);\n  //\n  //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n  //         const currentMarker = new window.kakao.maps.Marker({\n  //             position: currentMarkerPosition,\n  //             title: \"현재 위치\"\n  //         });\n  //         currentMarker.setMap(map);\n  //     }\n  // }, [position]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: styles.map\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(MapPage, \"ta//Azy/tw8ERq+GE1l7Z/v6T8c=\");\n_c = MapPage;\nexport default MapPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null;\n// }\n//\n// function MapPage({ selectedPlace }: MapPageProps) {\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [keyword, setKeyword] = useState<string>('');\n//     const [places, setPlaces] = useState<any[]>([]);\n//     const [pagination, setPagination] = useState<any>(null);\n//\n//     useEffect(() => {\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//\n//             if (selectedPlace) {\n//                 const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: markerPosition\n//                 });\n//\n//                 const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>';\n//                 const infowindow = new window.kakao.maps.InfoWindow({\n//                     content: iwContent,\n//                     removable: true\n//                 });\n//\n//                 marker.setMap(map);\n//\n//                 window.kakao.maps.event.addListener(marker, 'click', function () {\n//                     infowindow.open(map, marker);\n//                 });\n//             }\n//\n//             // 장소 검색 객체를 생성합니다\n//             const ps = new window.kakao.maps.services.Places();\n//\n//             // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n//             const infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n//\n//             // 검색 결과 목록과 마커를 표출하는 함수입니다\n//             const displayPlaces = (places: any[]) => {\n//                 const listEl = document.getElementById('placesList');\n//                 const bounds = new window.kakao.maps.LatLngBounds();\n//\n//                 // 검색 결과 목록에 추가된 항목들을 제거합니다\n//                 if (listEl) {\n//                     removeAllChildNods(listEl);\n//                 }\n//\n//                 // 지도에 표시되고 있는 마커를 제거합니다\n//                 removeMarker();\n//\n//                 for (let i = 0; i < places.length; i++) {\n//                     // 마커를 생성하고 지도에 표시합니다\n//                     const placePosition = new window.kakao.maps.LatLng(places[i].y, places[i].x);\n//                     const marker = addMarker(placePosition, i);\n//                     const itemEl = getListItem(i, places[i]);\n//\n//                     bounds.extend(placePosition);\n//\n//                     // 마커와 검색결과 항목에 mouseover 했을때\n//                     // 해당 장소에 인포윈도우에 장소명을 표시합니다\n//                     // mouseout 했을 때는 인포윈도우를 닫습니다\n//                     (function (marker, title) {\n//                         window.kakao.maps.event.addListener(marker, 'mouseover', function () {\n//                             displayInfowindow(marker, title);\n//                         });\n//\n//                         window.kakao.maps.event.addListener(marker, 'mouseout', function () {\n//                             infowindow.close();\n//                         });\n//\n//                         itemEl.onmouseover = function () {\n//                             displayInfowindow(marker, title);\n//                         };\n//\n//                         itemEl.onmouseout = function () {\n//                             infowindow.close();\n//                         };\n//                     })(marker, places[i].place_name);\n//\n//                     if (listEl) {\n//                         listEl.appendChild(itemEl);\n//                     }\n//                 }\n//\n//                 // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n//                 map.setBounds(bounds);\n//             };\n//\n//             // 검색 결과 목록 하단에 페이지번호를 표시는 함수입니다\n//             const displayPagination = (pagination: any) => {\n//                 const paginationEl = document.getElementById('pagination');\n//                 const fragment = document.createDocumentFragment();\n//\n//                 // 기존에 추가된 페이지번호를 삭제합니다\n//                 if (paginationEl) {\n//                     while (paginationEl.hasChildNodes()) {\n//                         if (paginationEl.lastChild) {\n//                             paginationEl.removeChild(paginationEl.lastChild);\n//                         }\n//                     }\n//                 }\n//\n//                 for (let i = 1; i <= pagination.last; i++) {\n//                     const el = document.createElement('a');\n//                     el.href = \"#\";\n//                     el.innerHTML = i.toString();\n//\n//                     if (i === pagination.current) {\n//                         el.className = 'on';\n//                     } else {\n//                         el.onclick = (function (i) {\n//                             return function () {\n//                                 pagination.gotoPage(i);\n//                             }\n//                         })(i);\n//                     }\n//\n//                     fragment.appendChild(el);\n//                 }\n//                 if (paginationEl) {\n//                     paginationEl.appendChild(fragment);\n//                 }\n//             };\n//\n//             // 키워드 검색을 요청하는 함수입니다\n//             const searchPlaces = () => {\n//                 if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n//                     alert('키워드를 입력해주세요!');\n//                     return false;\n//                 }\n//\n//                 // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n//                 ps.keywordSearch(keyword, (data: any[], status: any, pagination: any) => {\n//                     if (status === window.kakao.maps.services.Status.OK) {\n//                         displayPlaces(data);\n//                         setPagination(pagination);\n//                     } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\n//                         alert('검색 결과가 존재하지 않습니다.');\n//                     } else if (status === window.kakao.maps.services.Status.ERROR) {\n//                         alert('검색 결과 중 오류가 발생했습니다.');\n//                     }\n//                 });\n//             };\n//\n//             // 검색결과 항목을 Element로 반환하는 함수입니다\n//             const getListItem = (index: number, places: any) => {\n//                 const el = document.createElement('li');\n//                 let itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' +\n//                     '<div class=\"info\">' +\n//                     '   <h5>' + places.place_name + '</h5>';\n//\n//                 if (places.road_address_name) {\n//                     itemStr += '    <span>' + places.road_address_name + '</span>' +\n//                         '   <span class=\"jibun gray\">' + places.address_name + '</span>';\n//                 } else {\n//                     itemStr += '    <span>' + places.address_name + '</span>';\n//                 }\n//\n//                 itemStr += '  <span class=\"tel\">' + places.phone + '</span>' +\n//                     '</div>';\n//\n//                 el.innerHTML = itemStr;\n//                 el.className = 'item';\n//\n//                 return el;\n//             };\n//\n//             // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n//             const addMarker = (position: any, idx: number) => {\n//                 const imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png';\n//                 const imageSize = new window.kakao.maps.Size(36, 37);\n//                 const imgOptions = {\n//                     spriteSize: new window.kakao.maps.Size(36, 691),\n//                     spriteOrigin: new window.kakao.maps.Point(0, (idx * 46) + 10),\n//                     offset: new window.kakao.maps.Point(13, 37)\n//                 };\n//                 const markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: position,\n//                     image: markerImage\n//                 });\n//\n//                 marker.setMap(map);\n//                 markers.push(marker);\n//\n//                 return marker;\n//             };\n//\n//             // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n//             const removeMarker = () => {\n//                 for (let i = 0; i < markers.length; i++) {\n//                     markers[i].setMap(null);\n//                 }\n//                 markers.length = 0; // 배열 초기화\n//             };\n//\n//             // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n//             // 인포윈도우에 장소명을 표시합니다\n//             const displayInfowindow = (marker: any, title: string) => {\n//                 const content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\n//\n//                 infowindow.setContent(content);\n//                 infowindow.open(map, marker);\n//             };\n//\n//             // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n//             const removeAllChildNods = (el: any) => {\n//                 while (el.hasChildNodes()) {\n//                     el.removeChild(el.lastChild!); // null 아님 단언 사용\n//                 }\n//             };\n//\n//             const markers: any[] = [];\n//         };\n//\n//         navigator.geolocation.getCurrentPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setCenter({ lat: latitude, lng: longitude });\n//             setPosition({ lat: latitude, lng: longitude });\n//             initializeMap(latitude, longitude);\n//         });\n//\n//         const watchId = navigator.geolocation.watchPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setPosition({ lat: latitude, lng: longitude });\n//         });\n//\n//         return () => {\n//             navigator.geolocation.clearWatch(watchId);\n//         };\n//     }, [selectedPlace, keyword]);\n//\n//     useEffect(() => {\n//         if (position.lat !== 0 && position.lng !== 0) {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//         }\n//     }, [position]);\n//\n//     return (\n//         <div className={styles.mapPage}>\n//             <div className={styles.searchContainer}>\n//                 <input\n//                     type=\"text\"\n//                     id=\"keyword\"\n//                     placeholder=\"검색어를 입력하세요\"\n//                     value={keyword}\n//                     onChange={(e) => setKeyword(e.target.value)}\n//                 />\n//                 <button id=\"searchButton\">검색</button>\n//             </div>\n//             <div id=\"map\" className={styles.map}></div>\n//             <div id=\"menu_wrap\" className={styles.menuWrap}>\n//                 <ul id=\"placesList\" className={styles.placesList}></ul>\n//                 <div id=\"pagination\" className={styles.pagination}></div>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","MapPage","selectedPlace","_s","center","setCenter","lat","lng","position","setPosition","initializeMap","latitude","longitude","container","document","getElementById","options","window","kakao","maps","LatLng","level","map","Map","currentMarkerPosition","currentMarker","Marker","title","setMap","markerPosition","marker","iwContent","iwRemoveable","infowindow","InfoWindow","content","removable","event","addListener","open","navigator","geolocation","getCurrentPosition","pos","coords","watchId","watchPosition","clearWatch","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\n\ndeclare global {\n    interface Window {\n        kakao: any;\n    }\n}\n\ninterface MapPageProps {\n    selectedPlace: { lat: number, lng: number } | null;\n}\n\nfunction MapPage({ selectedPlace }: MapPageProps) {\n    const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n    const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n\n    useEffect(() => {\n        const initializeMap = (latitude: number, longitude: number) => {\n            // 지도생성\n            const container = document.getElementById('map');\n            const options = {\n                center: new window.kakao.maps.LatLng(latitude, longitude),\n                level: 3\n            };\n            const map = new window.kakao.maps.Map(container, options);\n            // 여기까지\n\n            // 현재 위치에 마커 표시\n            const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n            const currentMarker = new window.kakao.maps.Marker({\n                position: currentMarkerPosition,\n                title: \"현재 위치\"\n            });\n            currentMarker.setMap(map);\n\n            if (selectedPlace) {\n                const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n                const marker = new window.kakao.maps.Marker({\n                    position: markerPosition\n                });\n\n                const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>',\n                    iwRemoveable = true;\n\n                const infowindow = new window.kakao.maps.InfoWindow({\n                    content: iwContent,\n                    removable: iwRemoveable\n                });\n\n                marker.setMap(map);\n\n                window.kakao.maps.event.addListener(marker, 'click', function () {\n                    infowindow.open(map, marker);\n                });\n            }\n        };\n\n        navigator.geolocation.getCurrentPosition((pos) => {\n            const latitude = pos.coords.latitude;\n            const longitude = pos.coords.longitude;\n            setCenter({ lat: latitude, lng: longitude });\n            setPosition({ lat: latitude, lng: longitude });\n            initializeMap(latitude, longitude);\n        });\n\n        const watchId = navigator.geolocation.watchPosition((pos) => {\n            const latitude = pos.coords.latitude;\n            const longitude = pos.coords.longitude;\n            setPosition({ lat: latitude, lng: longitude });\n        });\n\n        return () => {\n            navigator.geolocation.clearWatch(watchId);\n        };\n    }, [selectedPlace, position]);\n\n    // useEffect(() => {\n    //     if (position.lat !== 0 && position.lng !== 0) {\n    //         const container = document.getElementById('map');\n    //         const options = {\n    //             center: new window.kakao.maps.LatLng(position.lat, position.lng),\n    //             level: 3\n    //         };\n    //         const map = new window.kakao.maps.Map(container, options);\n    //\n    //         const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n    //         const currentMarker = new window.kakao.maps.Marker({\n    //             position: currentMarkerPosition,\n    //             title: \"현재 위치\"\n    //         });\n    //         currentMarker.setMap(map);\n    //     }\n    // }, [position]);\n\n    return (\n        <div id=\"map\" className={styles.map}>\n        </div>\n    );\n}\n\nexport default MapPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number, lng: number } | null;\n// }\n//\n// function MapPage({ selectedPlace }: MapPageProps) {\n//     const [center, setCenter] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [position, setPosition] = useState<{ lat: number, lng: number }>({ lat: 33.450701, lng: 126.570667 });\n//     const [keyword, setKeyword] = useState<string>('');\n//     const [places, setPlaces] = useState<any[]>([]);\n//     const [pagination, setPagination] = useState<any>(null);\n//\n//     useEffect(() => {\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//\n//             if (selectedPlace) {\n//                 const markerPosition = new window.kakao.maps.LatLng(selectedPlace.lat, selectedPlace.lng);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: markerPosition\n//                 });\n//\n//                 const iwContent = '<div style=\"padding:5px;\">선택된 장소</div>';\n//                 const infowindow = new window.kakao.maps.InfoWindow({\n//                     content: iwContent,\n//                     removable: true\n//                 });\n//\n//                 marker.setMap(map);\n//\n//                 window.kakao.maps.event.addListener(marker, 'click', function () {\n//                     infowindow.open(map, marker);\n//                 });\n//             }\n//\n//             // 장소 검색 객체를 생성합니다\n//             const ps = new window.kakao.maps.services.Places();\n//\n//             // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n//             const infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n//\n//             // 검색 결과 목록과 마커를 표출하는 함수입니다\n//             const displayPlaces = (places: any[]) => {\n//                 const listEl = document.getElementById('placesList');\n//                 const bounds = new window.kakao.maps.LatLngBounds();\n//\n//                 // 검색 결과 목록에 추가된 항목들을 제거합니다\n//                 if (listEl) {\n//                     removeAllChildNods(listEl);\n//                 }\n//\n//                 // 지도에 표시되고 있는 마커를 제거합니다\n//                 removeMarker();\n//\n//                 for (let i = 0; i < places.length; i++) {\n//                     // 마커를 생성하고 지도에 표시합니다\n//                     const placePosition = new window.kakao.maps.LatLng(places[i].y, places[i].x);\n//                     const marker = addMarker(placePosition, i);\n//                     const itemEl = getListItem(i, places[i]);\n//\n//                     bounds.extend(placePosition);\n//\n//                     // 마커와 검색결과 항목에 mouseover 했을때\n//                     // 해당 장소에 인포윈도우에 장소명을 표시합니다\n//                     // mouseout 했을 때는 인포윈도우를 닫습니다\n//                     (function (marker, title) {\n//                         window.kakao.maps.event.addListener(marker, 'mouseover', function () {\n//                             displayInfowindow(marker, title);\n//                         });\n//\n//                         window.kakao.maps.event.addListener(marker, 'mouseout', function () {\n//                             infowindow.close();\n//                         });\n//\n//                         itemEl.onmouseover = function () {\n//                             displayInfowindow(marker, title);\n//                         };\n//\n//                         itemEl.onmouseout = function () {\n//                             infowindow.close();\n//                         };\n//                     })(marker, places[i].place_name);\n//\n//                     if (listEl) {\n//                         listEl.appendChild(itemEl);\n//                     }\n//                 }\n//\n//                 // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n//                 map.setBounds(bounds);\n//             };\n//\n//             // 검색 결과 목록 하단에 페이지번호를 표시는 함수입니다\n//             const displayPagination = (pagination: any) => {\n//                 const paginationEl = document.getElementById('pagination');\n//                 const fragment = document.createDocumentFragment();\n//\n//                 // 기존에 추가된 페이지번호를 삭제합니다\n//                 if (paginationEl) {\n//                     while (paginationEl.hasChildNodes()) {\n//                         if (paginationEl.lastChild) {\n//                             paginationEl.removeChild(paginationEl.lastChild);\n//                         }\n//                     }\n//                 }\n//\n//                 for (let i = 1; i <= pagination.last; i++) {\n//                     const el = document.createElement('a');\n//                     el.href = \"#\";\n//                     el.innerHTML = i.toString();\n//\n//                     if (i === pagination.current) {\n//                         el.className = 'on';\n//                     } else {\n//                         el.onclick = (function (i) {\n//                             return function () {\n//                                 pagination.gotoPage(i);\n//                             }\n//                         })(i);\n//                     }\n//\n//                     fragment.appendChild(el);\n//                 }\n//                 if (paginationEl) {\n//                     paginationEl.appendChild(fragment);\n//                 }\n//             };\n//\n//             // 키워드 검색을 요청하는 함수입니다\n//             const searchPlaces = () => {\n//                 if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n//                     alert('키워드를 입력해주세요!');\n//                     return false;\n//                 }\n//\n//                 // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n//                 ps.keywordSearch(keyword, (data: any[], status: any, pagination: any) => {\n//                     if (status === window.kakao.maps.services.Status.OK) {\n//                         displayPlaces(data);\n//                         setPagination(pagination);\n//                     } else if (status === window.kakao.maps.services.Status.ZERO_RESULT) {\n//                         alert('검색 결과가 존재하지 않습니다.');\n//                     } else if (status === window.kakao.maps.services.Status.ERROR) {\n//                         alert('검색 결과 중 오류가 발생했습니다.');\n//                     }\n//                 });\n//             };\n//\n//             // 검색결과 항목을 Element로 반환하는 함수입니다\n//             const getListItem = (index: number, places: any) => {\n//                 const el = document.createElement('li');\n//                 let itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' +\n//                     '<div class=\"info\">' +\n//                     '   <h5>' + places.place_name + '</h5>';\n//\n//                 if (places.road_address_name) {\n//                     itemStr += '    <span>' + places.road_address_name + '</span>' +\n//                         '   <span class=\"jibun gray\">' + places.address_name + '</span>';\n//                 } else {\n//                     itemStr += '    <span>' + places.address_name + '</span>';\n//                 }\n//\n//                 itemStr += '  <span class=\"tel\">' + places.phone + '</span>' +\n//                     '</div>';\n//\n//                 el.innerHTML = itemStr;\n//                 el.className = 'item';\n//\n//                 return el;\n//             };\n//\n//             // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n//             const addMarker = (position: any, idx: number) => {\n//                 const imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png';\n//                 const imageSize = new window.kakao.maps.Size(36, 37);\n//                 const imgOptions = {\n//                     spriteSize: new window.kakao.maps.Size(36, 691),\n//                     spriteOrigin: new window.kakao.maps.Point(0, (idx * 46) + 10),\n//                     offset: new window.kakao.maps.Point(13, 37)\n//                 };\n//                 const markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions);\n//                 const marker = new window.kakao.maps.Marker({\n//                     position: position,\n//                     image: markerImage\n//                 });\n//\n//                 marker.setMap(map);\n//                 markers.push(marker);\n//\n//                 return marker;\n//             };\n//\n//             // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n//             const removeMarker = () => {\n//                 for (let i = 0; i < markers.length; i++) {\n//                     markers[i].setMap(null);\n//                 }\n//                 markers.length = 0; // 배열 초기화\n//             };\n//\n//             // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n//             // 인포윈도우에 장소명을 표시합니다\n//             const displayInfowindow = (marker: any, title: string) => {\n//                 const content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\n//\n//                 infowindow.setContent(content);\n//                 infowindow.open(map, marker);\n//             };\n//\n//             // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n//             const removeAllChildNods = (el: any) => {\n//                 while (el.hasChildNodes()) {\n//                     el.removeChild(el.lastChild!); // null 아님 단언 사용\n//                 }\n//             };\n//\n//             const markers: any[] = [];\n//         };\n//\n//         navigator.geolocation.getCurrentPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setCenter({ lat: latitude, lng: longitude });\n//             setPosition({ lat: latitude, lng: longitude });\n//             initializeMap(latitude, longitude);\n//         });\n//\n//         const watchId = navigator.geolocation.watchPosition((pos) => {\n//             const latitude = pos.coords.latitude;\n//             const longitude = pos.coords.longitude;\n//             setPosition({ lat: latitude, lng: longitude });\n//         });\n//\n//         return () => {\n//             navigator.geolocation.clearWatch(watchId);\n//         };\n//     }, [selectedPlace, keyword]);\n//\n//     useEffect(() => {\n//         if (position.lat !== 0 && position.lng !== 0) {\n//             const container = document.getElementById('map');\n//             const options = {\n//                 center: new window.kakao.maps.LatLng(position.lat, position.lng),\n//                 level: 3\n//             };\n//             const map = new window.kakao.maps.Map(container, options);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(position.lat, position.lng);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\"\n//             });\n//             currentMarker.setMap(map);\n//         }\n//     }, [position]);\n//\n//     return (\n//         <div className={styles.mapPage}>\n//             <div className={styles.searchContainer}>\n//                 <input\n//                     type=\"text\"\n//                     id=\"keyword\"\n//                     placeholder=\"검색어를 입력하세요\"\n//                     value={keyword}\n//                     onChange={(e) => setKeyword(e.target.value)}\n//                 />\n//                 <button id=\"searchButton\">검색</button>\n//             </div>\n//             <div id=\"map\" className={styles.map}></div>\n//             <div id=\"menu_wrap\" className={styles.menuWrap}>\n//                 <ul id=\"placesList\" className={styles.placesList}></ul>\n//                 <div id=\"pagination\" className={styles.pagination}></div>\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default MapPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}