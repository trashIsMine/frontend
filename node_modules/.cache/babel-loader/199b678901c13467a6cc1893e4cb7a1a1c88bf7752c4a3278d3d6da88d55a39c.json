{"ast":null,"code":"var _jsxFileName = \"/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import ReactDOMServer from \"react-dom/server\";\n// import axios from \"axios\";\n// import { getPost } from \"../interface/posts\";\n// import flat from \"../images/flat.png\";\n// import MarkerContent from \"../components/markercontent\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number; lng: number } | null;\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     const [center, setCenter] = useState<{ lat: number; lng: number }>({\n//         lat: 33.450701,\n//         lng: 126.570667,\n//     });\n//     const [posts, setPosts] = useState<getPost[]>([]);\n//\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             try {\n//                 const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n//                 if (response.status === 200) {\n//                     setPosts(response.data);\n//                 } else {\n//                     alert(\"Post get failed. Please try again.\");\n//                 }\n//             } catch (error) {\n//                 if (axios.isAxiosError(error) && error.response) {\n//                     alert(`Error: ${error.response.data}`);\n//                 } else {\n//                     alert(\"Error during request\");\n//                 }\n//             }\n//         };\n//\n//         fetchPosts();\n//     }, []);\n//\n//     useEffect(() => {\n//         const getCurrentLocation = () => {\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//                         setCenter({ lat: latitude, lng: longitude });\n//\n//                         initializeMap(latitude, longitude);\n//                     },\n//                     (error) => {\n//                         console.error(\"Error retrieving location:\", error);\n//                     }\n//                 );\n//             } else {\n//                 console.error(\"Geolocation is not supported by this browser.\");\n//             }\n//         };\n//\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             const mapContainer = document.getElementById(\"map\");\n//             const mapOption = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3,\n//             };\n//\n//             const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\",\n//             });\n//             currentMarker.setMap(map);\n//             const imageSrc = flat, // 마커이미지의 주소입니다\n//                 imageSize = new window.kakao.maps.Size(40, 40), // 마커이미지의 크기입니다\n//                 imageOption = {offset: new window.kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n//             const markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imageOption)\n//\n//             posts.map((post) => {\n//                 console.log(typeof(post.lat), typeof(post.lng))\n//                 if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n//                     const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n//                     const postMarker = new window.kakao.maps.Marker({\n//                         position: postMarkerPosition,\n//                         title: post.title, // 포스트 제목을 마커 타이틀로 설정\n//                         image: markerImage\n//                     });\n//\n//                     const iwContent = ReactDOMServer.renderToString(<MarkerContent post={post} />); // 인포윈도우 내용\n//                     const infoWindow = new window.kakao.maps.InfoWindow({\n//                         content: iwContent, // 인포윈도우 내용\n//                         removable: true, // 인포윈도우 닫기 버튼 표시\n//                     });\n//\n//                     postMarker.setMap(map);\n//\n//                     // 마커 클릭 시 인포윈도우 표시\n//                     window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n//                         infoWindow.open(map, postMarker);\n//                     });\n//                 }\n//             });\n//         };\n//\n//         // 지도와 마커를 초기화합니다.\n//         if (posts.length > 0) {\n//             getCurrentLocation();\n//         }\n//     }, [posts]);\n//\n//     return <div id=\"map\" className={styles.map}></div>;\n// }\n//\n// export default MapPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport ReactDOMServer from \"react-dom/server\";\nimport axios from \"axios\";\nimport marker from \"../images/marker.png\";\nimport MarkerContent from \"../components/markercontent\";\nimport DetailPanel from \"../components/DetailPannel\"; // 상세 정보 패널 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapPage({\n  selectedPlace,\n  login,\n  setLogin\n}) {\n  _s();\n  const [center, setCenter] = useState({\n    lat: 33.450701,\n    lng: 126.570667\n  });\n  const [posts, setPosts] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n        if (response.status === 200) {\n          setPosts(response.data);\n        } else {\n          alert(\"Post get failed. Please try again.\");\n        }\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response) {\n          alert(`Error: ${error.response.data}`);\n        } else {\n          alert(\"Error during request\");\n        }\n      }\n    };\n    fetchPosts();\n  }, []);\n  useEffect(() => {\n    const getCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setCenter({\n            lat: latitude,\n            lng: longitude\n          });\n          initializeMap(latitude, longitude);\n        }, error => {\n          console.error(\"Error retrieving location:\", error);\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    const initializeMap = (latitude, longitude) => {\n      const mapContainer = document.getElementById(\"map\");\n      const mapOption = {\n        center: new window.kakao.maps.LatLng(latitude, longitude),\n        level: 3\n      };\n      const map = new window.kakao.maps.Map(mapContainer, mapOption);\n      const markerImage = new window.kakao.maps.MarkerImage(marker, new window.kakao.maps.Size(30, 40), {\n        offset: new window.kakao.maps.Point(27, 69)\n      });\n      posts.map(post => {\n        console.log(typeof post.lat, typeof post.lng);\n        if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n          const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n          const postMarker = new window.kakao.maps.Marker({\n            position: postMarkerPosition,\n            title: post.title,\n            // 포스트 제목을 마커 타이틀로 설정\n            image: markerImage\n          });\n          const iwContent = ReactDOMServer.renderToString( /*#__PURE__*/_jsxDEV(MarkerContent, {\n            post: post\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 69\n          }, this)); // 인포윈도우 내용\n          const infoWindow = new window.kakao.maps.InfoWindow({\n            content: iwContent,\n            // 인포윈도우 내용\n            removable: true // 인포윈도우 닫기 버튼 표시\n          });\n          postMarker.setMap(map);\n\n          // 마커 클릭 시 인포윈도우 표시\n          window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n            infoWindow.open(map, postMarker);\n            setSelectedPost(post);\n          });\n        }\n      });\n    };\n    if (posts.length > 0) {\n      getCurrentLocation();\n    }\n  }, [posts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: styles.map,\n    children: [selectedPost && /*#__PURE__*/_jsxDEV(DetailPanel, {\n      post: selectedPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 30\n    }, this), \"  // \\uC0C1\\uC138 \\uD328\\uB110 \\uC870\\uAC74\\uBD80 \\uB80C\\uB354\\uB9C1\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 9\n  }, this);\n}\n_s(MapPage, \"5Uobd5pPZHNUF9iPy0bz1Q9tOGQ=\");\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useEffect","useState","styles","ReactDOMServer","axios","marker","MarkerContent","DetailPanel","jsxDEV","_jsxDEV","MapPage","selectedPlace","login","setLogin","_s","center","setCenter","lat","lng","posts","setPosts","selectedPost","setSelectedPost","fetchPosts","response","get","status","data","alert","error","isAxiosError","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","initializeMap","console","mapContainer","document","getElementById","mapOption","window","kakao","maps","LatLng","level","map","Map","markerImage","MarkerImage","Size","offset","Point","post","log","postMarkerPosition","parseFloat","postMarker","Marker","title","image","iwContent","renderToString","fileName","_jsxFileName","lineNumber","columnNumber","infoWindow","InfoWindow","content","removable","setMap","event","addListener","open","length","id","className","children","_c","$RefreshReg$"],"sources":["/Users/parksaseong/Desktop/saseong/github/frontend/src/pages/MapPage.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"../styles/mappage.module.scss\";\n// import ReactDOMServer from \"react-dom/server\";\n// import axios from \"axios\";\n// import { getPost } from \"../interface/posts\";\n// import flat from \"../images/flat.png\";\n// import MarkerContent from \"../components/markercontent\";\n//\n// declare global {\n//     interface Window {\n//         kakao: any;\n//     }\n// }\n//\n// interface MapPageProps {\n//     selectedPlace: { lat: number; lng: number } | null;\n//     login: boolean;\n//     setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n// }\n//\n// function MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n//     const [center, setCenter] = useState<{ lat: number; lng: number }>({\n//         lat: 33.450701,\n//         lng: 126.570667,\n//     });\n//     const [posts, setPosts] = useState<getPost[]>([]);\n//\n//     useEffect(() => {\n//         const fetchPosts = async () => {\n//             try {\n//                 const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n//                 if (response.status === 200) {\n//                     setPosts(response.data);\n//                 } else {\n//                     alert(\"Post get failed. Please try again.\");\n//                 }\n//             } catch (error) {\n//                 if (axios.isAxiosError(error) && error.response) {\n//                     alert(`Error: ${error.response.data}`);\n//                 } else {\n//                     alert(\"Error during request\");\n//                 }\n//             }\n//         };\n//\n//         fetchPosts();\n//     }, []);\n//\n//     useEffect(() => {\n//         const getCurrentLocation = () => {\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     (position) => {\n//                         const latitude = position.coords.latitude;\n//                         const longitude = position.coords.longitude;\n//                         setCenter({ lat: latitude, lng: longitude });\n//\n//                         initializeMap(latitude, longitude);\n//                     },\n//                     (error) => {\n//                         console.error(\"Error retrieving location:\", error);\n//                     }\n//                 );\n//             } else {\n//                 console.error(\"Geolocation is not supported by this browser.\");\n//             }\n//         };\n//\n//         const initializeMap = (latitude: number, longitude: number) => {\n//             const mapContainer = document.getElementById(\"map\");\n//             const mapOption = {\n//                 center: new window.kakao.maps.LatLng(latitude, longitude),\n//                 level: 3,\n//             };\n//\n//             const map = new window.kakao.maps.Map(mapContainer, mapOption);\n//\n//             const currentMarkerPosition = new window.kakao.maps.LatLng(latitude, longitude);\n//             const currentMarker = new window.kakao.maps.Marker({\n//                 position: currentMarkerPosition,\n//                 title: \"현재 위치\",\n//             });\n//             currentMarker.setMap(map);\n//             const imageSrc = flat, // 마커이미지의 주소입니다\n//                 imageSize = new window.kakao.maps.Size(40, 40), // 마커이미지의 크기입니다\n//                 imageOption = {offset: new window.kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n//             const markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imageOption)\n//\n//             posts.map((post) => {\n//                 console.log(typeof(post.lat), typeof(post.lng))\n//                 if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n//                     const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n//                     const postMarker = new window.kakao.maps.Marker({\n//                         position: postMarkerPosition,\n//                         title: post.title, // 포스트 제목을 마커 타이틀로 설정\n//                         image: markerImage\n//                     });\n//\n//                     const iwContent = ReactDOMServer.renderToString(<MarkerContent post={post} />); // 인포윈도우 내용\n//                     const infoWindow = new window.kakao.maps.InfoWindow({\n//                         content: iwContent, // 인포윈도우 내용\n//                         removable: true, // 인포윈도우 닫기 버튼 표시\n//                     });\n//\n//                     postMarker.setMap(map);\n//\n//                     // 마커 클릭 시 인포윈도우 표시\n//                     window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n//                         infoWindow.open(map, postMarker);\n//                     });\n//                 }\n//             });\n//         };\n//\n//         // 지도와 마커를 초기화합니다.\n//         if (posts.length > 0) {\n//             getCurrentLocation();\n//         }\n//     }, [posts]);\n//\n//     return <div id=\"map\" className={styles.map}></div>;\n// }\n//\n// export default MapPage;\n\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../styles/mappage.module.scss\";\nimport ReactDOMServer from \"react-dom/server\";\nimport axios from \"axios\";\nimport {EmptygetPost, getPost} from \"../interface/posts\";\nimport flat from \"../images/flat.png\";\nimport pickup from \"../images/pickup.png\";\nimport marker from \"../images/marker.png\";\nimport MarkerContent from \"../components/markercontent\";\nimport DetailPanel from \"../components/DetailPannel\";  // 상세 정보 패널 컴포넌트\n\ndeclare global {\n    interface Window {\n        kakao: any;\n    }\n}\n\ninterface MapPageProps {\n    selectedPlace: { lat: number; lng: number } | null;\n    login: boolean;\n    setLogin: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction MapPage({ selectedPlace, login, setLogin }: MapPageProps) {\n    const [center, setCenter] = useState<{ lat: number; lng: number }>({ lat: 33.450701, lng: 126.570667 });\n    const [posts, setPosts] = useState<getPost[]>([]);\n    const [selectedPost, setSelectedPost] = useState<getPost | null>(null);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            try {\n                const response = await axios.get(\"http://3.37.252.66:8080/index/articles\");\n                if (response.status === 200) {\n                    setPosts(response.data);\n                } else {\n                    alert(\"Post get failed. Please try again.\");\n                }\n            } catch (error) {\n                if (axios.isAxiosError(error) && error.response) {\n                    alert(`Error: ${error.response.data}`);\n                } else {\n                    alert(\"Error during request\");\n                }\n            }\n        };\n\n        fetchPosts();\n    }, []);\n\n    useEffect(() => {\n        const getCurrentLocation = () => {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        const latitude = position.coords.latitude;\n                        const longitude = position.coords.longitude;\n                        setCenter({ lat: latitude, lng: longitude });\n                        initializeMap(latitude, longitude);\n                    },\n                    (error) => {\n                        console.error(\"Error retrieving location:\", error);\n                    }\n                );\n            } else {\n                console.error(\"Geolocation is not supported by this browser.\");\n            }\n        };\n\n        const initializeMap = (latitude: number, longitude: number) => {\n            const mapContainer = document.getElementById(\"map\");\n            const mapOption = {\n                center: new window.kakao.maps.LatLng(latitude, longitude),\n                level: 3,\n            };\n            const map = new window.kakao.maps.Map(mapContainer, mapOption);\n            const markerImage = new window.kakao.maps.MarkerImage(marker, new window.kakao.maps.Size(30, 40), {offset: new window.kakao.maps.Point(27, 69)});\n\n            posts.map((post) => {\n                console.log(typeof(post.lat), typeof(post.lng))\n                if (typeof post.lat === \"string\" && typeof post.lng === \"string\") {\n                    const postMarkerPosition = new window.kakao.maps.LatLng(parseFloat(post.lat), parseFloat(post.lng));\n                    const postMarker = new window.kakao.maps.Marker({\n                        position: postMarkerPosition,\n                        title: post.title, // 포스트 제목을 마커 타이틀로 설정\n                        image: markerImage\n                    });\n\n                    const iwContent = ReactDOMServer.renderToString(<MarkerContent post={post} />); // 인포윈도우 내용\n                    const infoWindow = new window.kakao.maps.InfoWindow({\n                        content: iwContent, // 인포윈도우 내용\n                        removable: true, // 인포윈도우 닫기 버튼 표시\n                    });\n\n                    postMarker.setMap(map);\n\n                    // 마커 클릭 시 인포윈도우 표시\n                    window.kakao.maps.event.addListener(postMarker, \"click\", function () {\n                        infoWindow.open(map, postMarker);\n                        setSelectedPost(post);\n                    });\n                }\n            });\n        };\n\n        if (posts.length > 0) {\n            getCurrentLocation();\n        }\n    }, [posts]);\n\n    return (\n        <div id=\"map\" className={styles.map}>\n            {selectedPost && <DetailPanel post={selectedPost} />}  // 상세 패널 조건부 렌더링\n        </div>\n    );\n}\n\nexport default MapPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}